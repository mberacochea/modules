nextflow_process {

    name "Test Process AMPS"
    script "../main.nf"
    process "AMPS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "amps"
    tag "unzip"
    tag "malt"
    tag "malt/build"
    tag "malt/run"
    tag "maltextract"

    setup {
        run("UNZIP", alias: "UNZIP_MALT") {
            script "../../unzip/main.nf"
            process {
                """
                input[0] = [
                    [],
                    file("https://ngi-igenomes.s3.eu-west-1.amazonaws.com/test-data/createtaxdb/taxonomy/megan-nucl-Feb2022.db.zip", checkIfExists: true)
                ]
                """
            }
        }
        run("UNZIP", alias: "UNZIP_MALTEXTRACT") {
            script "../../unzip/main.nf"
            process {
                """
                input[0] = [
                    [],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/ncbi_taxmap.zip', checkIfExists: true)
                ]
                """
            }
        }
        run("MALT_BUILD") {
            script "../../malt/build/main.nf"
            process {
                """
                input[0] = [
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[1] = [] // GFF
                input[2] = UNZIP_MALT.out.unzipped_archive.map { it[1] }
                """
            }
        }
        run("MALT_RUN") {
            script "../../malt/run/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                input[1] = MALT_BUILD.out.index
                """
            }
        }
        run("MALTEXTRACT") {
            script "../../maltextract/main.nf"
            process {
                """
                input[0] = MALT_RUN.out.rma6
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                input[2] = UNZIP_MALTEXTRACT.out.unzipped_archive.map{ it[1] }
                """
            }
        }
    }

    test("maltextract - sarscov2 - genome_fasta") {

        when {
            process {
                """
                input[0] = MALTEXTRACT.out.results.map { it[1] }
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.json).match("json") },
                { assert snapshot(process.out.tsv).match("tsv") },
                { assert path(process.out.summary_pdf.get(0)).exists() },
                { assert path(process.out.candidate_pdfs.get(0)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("matlextract - sarscov2 - genome_fasta - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = MALTEXTRACT.out.results.map { it[1] }
                input[1] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/maltextract/taxon_list.txt', checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
